// Generated by StructRegistryGenerator
package com.zendesk.libnjkafka;

import java.util.Map;
import java.util.HashMap;

import org.graalvm.word.PointerBase;
import org.graalvm.word.WordFactory;
import org.graalvm.word.UnsignedWord;

public class StructSizeRegistry {
    private static final Map<Class<? extends PointerBase>, Integer> STRUCT_SIZES = new HashMap<>();

    static {

        STRUCT_SIZES.put(Structs.ConsumerConfigLayout.class, 112);
        STRUCT_SIZES.put(Structs.ConsumerRecordLayout.class, 48);
        STRUCT_SIZES.put(Structs.ConsumerRecordListLayout.class, 16);
        STRUCT_SIZES.put(Structs.TopicPartitionLayout.class, 16);
        STRUCT_SIZES.put(Structs.TopicPartitionListLayout.class, 16);
        STRUCT_SIZES.put(Structs.TopicPartitionOffsetAndMetadataLayout.class, 32);
        STRUCT_SIZES.put(Structs.TopicPartitionOffsetAndMetadataListLayout.class, 16);
        STRUCT_SIZES.put(Structs.TopicPartitionOffsetAndMetadataLayout.class, 32);
    }

    public static UnsignedWord get(Class<? extends PointerBase> structClass) {
        if (!STRUCT_SIZES.containsKey(structClass)) {
            throw new IllegalArgumentException("Size not defined for struct: " + structClass.getName());
        }
        return WordFactory.unsigned(STRUCT_SIZES.get(structClass));
    }
}

